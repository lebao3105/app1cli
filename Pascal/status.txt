*Some infomations are taken from Free Pascal Wiki, Google Translate (I need some words:) and forums.* 
Friday, 26/11/2021, in Ha Noi
*** Welcome back! After app1 1.0.27 released today, now I am working at app1 1.0.28 with the new features as I said in README.md.
>>> And this file is a "changelog file" I made for every new app1 version.
>>> OK, now let's see our work.
*** First, I make the arguments that we will use like this:
>>>>>>>>>>> app1 [sub_programs] [options or numbers]
>>> With: 
>>> [sub-programs] : cpr (compare), cal (calculator), about (infomation aka about)
>>> [options or numbers] will like this:
>>>>>>>>>>>> if the user choose cpr with 2 numbers, we will have the syntax: app1 cpr 5 46
>>>>>>>>>>>> or cal with simple expression: app1 cal [add/sub/multiple/divide] 7 1
>>>>>>>>>>>> and advanced too: app1 cal adv [expressions] 5 6 7(if the expression needs 3 numbers)
>>> [sub-programs] and [options] are the program's arguments. Arguments are simple words usually separated by spaces (confer the IFS variable in some shells). 
>>> In a narrow sense arguments are all supplied words that are neither options or (part of) parameters. In general, though, arguments are all words on the command line not being interpreted in any way. 
>>> So, we have [sub-programs] is a argument and I defined it as ParamStr(1), [options or numbers] defined as ParamStr(2), ParamStr(3) and more.
>>> ParamStr(0) shows the current program's syntax, include all others arguments. For example: 
{***
    program showsyntax;
    // this program is used as an example for how to show the current program's syntax.
    // try this on non-macOS operating system.
    {$mode objFPC} // Object Pascal mode
    begin
        writeln('The current program location (and its syntax too) is: ', ParamStr(0));
        writeln('Done.');
    end.
***}    
>>> Terminal output:
{*** $ ./showsyntax hello world
     The current program location (and its syntax too) is: /path/to/application/showsyntax hello world
     Done.
     $ <!-- type some command here... -->
***} 
>>> The ParamStr(0) output is /path/to/application/showsyntax hello world.
>>> OK, let's see how I will make the arguments works.
>>> It will work like this:
{*** if ParamStr(1) = 'some-value' then
        begin
           //do stuff
           if ParamStr(2) = '[options]' then // if there are any other things
              begin
                    writeln('An option has been passed');
                    if ParamStr(3) = '[more]' then begin .. end //do more
                    else if Param(3) = '' then writeln('We need something more'); exit;
              end;
          else if ParamStr(2) = '' then goto a_label; //if the user use 1 argument
       end;
       //do more and the rest of the program is here
***}       
